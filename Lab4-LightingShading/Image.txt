#define NUM_LIGHTS 4
// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
// Edited by Colin Deane
// Edit description:
// Implemented various light sources as well as used Blinn-Phong reflectance to get a certain lighting
// 
// Sources:
// Daniel S. Buckstein
//		Provided the code framework as well as the steps for creating lights

// Stina Bridgeman
//		Provided the equation for basic cel-shading

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    point: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

// Struct for a sphere
struct Sphere
{
  	vec4 center;
    float radius;
};

// Initialize a Sphere structure
// No longer a boolean because I trust the user
void initSphere(out Sphere sphere,
                in vec3 center, in float radius)
{
    sphere.center = asPoint(center);
    sphere.radius = radius;   
}

// Structure for a PointLight
struct PointLight
{
	vec3 center; // Location of light source
    vec4 color;	 // The color of the light
    float lIntensity; // The intensity of the light
    
};

// Initialize a PointLight structure
void initLight(in vec3 center, in vec4 color, in float intensity,
               out PointLight light)
{
    light.center = center;			// Center of the light
    light.color = color;			// Color of the light
    light.lIntensity = intensity;	// Intensity of the light
      
}

// Return the length squared of a vector
float lenSq(vec2 x)
{
 	return dot(x, x);   
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin, in float time)
{
    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS
    //  -> what does the ray look like as color?
    //return rayDirection;
	
    // SCENE
    Sphere sphere;
    initSphere(sphere, vec3(0.0, 0.0, -4.0), 0.5);
    
    PointLight lights[4];
    initLight(vec3(1.0 + (2.0 * sin(time)), 1.0 + (2.0 * cos(time)), -2.0), vec4(1.0), 10.0f, lights[0]);
    initLight(vec3(-1.0 - (0.5 * cos(time)), 0.5, -3.0), vec4(0.0, 1.0, 0.0, 1.0), 10.0f, lights[1]);
    initLight(vec3(5.0 + 2.0 * sin(time), -1.0 + cos(time), -2.0), vec4(0.0, 1.0, 1.0, 1.0), 10.0f, lights[2]);
    initLight(vec3(0.0 + (atan(time)), -1.0 + 2.0 * sin(time), -1.0), vec4(1.0, 0.0, 0.0, 1.0), 10.0f, lights[3]);
    
    // testing proc sphere
    vec3 dp;
    dp.xy = rayDirection.xy - sphere.center.xy;
    float lSq = lenSq(dp.xy);
    float rSq = sphere.radius * sphere.radius;
    
    // Put the more likely case first (performance)
    if (!(lSq <= rSq))
    {
     	// BACKGROUND
		const vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);
		return vec4(mix(warm, cool, rayDirection.y), 1.0);
        
    }
    
    // Have a vector to store all the colors
    vec3 finalColor = vec3(0.0f);
    
    //return vec4(0.0, 1.0, 1.0, 1.0);
    //dp.z = (sphere.radius * sphere.radius) - ((dp.x * dp.x) + (dp.y * dp.y));// This is actually dz_sq
    dp.z = rSq - lSq; // dp.z contains the squared version of z
    vec3 position = sphere.center.xyz + vec3(dp.x, dp.y, sqrt(dp.z));
    vec3 normal = (position - sphere.center.xyz) / sphere.radius; // The regular normal of the sphere
    vec3 normalAdjusted = (normal + 1.0f) * 0.5f; // The adjusted normal to get a cooler color gradient
    
    // Add up all the lights effects
    for(int i = NUM_LIGHTS - 1; i >= 0; --i)
    {

        // float dist = distance(lights[i].center, position);
        // distance is just the length factor of the two subtracted vectors
        // since that is reused, I thought it would be useful to store
        // dist equals the unnormalized Light Vector
        float dist = length(lights[i].center - position);
        vec3 normLight = vec3(lights[i].center - position) / dist; // Light Vector - L

        // Calculate the light's diffuse coefficient
        float difCo = max(0.0f, dot(normalAdjusted, normLight)); // N * L
        
        // Inverse light intensity is calculated here for attenuation
        float invInt = 1.0f / lights[i].lIntensity;
        float invInt2 = invInt * invInt;
        // Calculate attenuation
        float attenInt = 1.0f / (1.0f + (dist * invInt) + ((dist * dist) * invInt));
        float ID = difCo * attenInt;


        // Blinn-Phong reflectance
        vec3 viewVec = normalize((vec3(0.0) - position)); // Viewer Vector - V
        vec3 halfwayVec = normalize(normLight + viewVec); // Halflway Vector - H
        
        // Calculate the specular coefficent and the specular intensity
        float specCo = max(0.0f, dot(normal, halfwayVec));
        float specInt = pow(specCo, 200.0f);

        // ((ID * CD) + (IS * CS))CL
        finalColor += ((ID * normalAdjusted + specInt * vec3(0.8)) * lights[i].color.rgb);
    }
    
    // Ambient lighting
    float globalInt = 0.15f;
    vec3 globalCol = vec3(0.1, 0.4, 0.4);
    // Add ambient lighting on top of the rest of the color
    finalColor += (globalInt * globalCol);
    
    // Basic cel shading
    // Source for this equation comes from Stina Bridgeman of Hobart and William Smith Colleges
    //		Source comes from this pdf: http://math.hws.edu/bridgeman/courses/424/f19/inclass/lab7.pdf
    float steps = 15.0f;
    finalColor = floor(finalColor * steps) / steps;
	return vec4(finalColor, 1.0f);
    

}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor += calcColor(rayDirection, rayOrigin, iTime);
}
