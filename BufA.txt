//   Copyright 2020 Colin Deane
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//	   		http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
//		File name: Buffer A
//		Purpose: Sample from a cubemap affected by rotation over time
//
// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> BUFFER A TAB (scene)

//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcSampleLocation: calculate the sample location on the cubemap
//	  cubeLocation: input base coordinates 
//	  time:		input time
sBasis calcSampleLocation(in sBasis cubeLocation, in float time)
{
    // Calculate the cos and sin of the time
    float cosTime = cos(time);
    float sinTime = sin(time);
    
    // Get the sample location by taking in the base location and multiplying by a rotation matrix
    sBasis sampleLocation = cubeLocation * mat3(cosTime, 0.0, sinTime, 0.0, 1.0, 0.0, -sinTime, 0.0, cosTime);

    // Return the sample location
    return sampleLocation;
}

// calcColor: calculate the color of current pixel
//	  vp:   	input viewport info
//	  ray:  	input ray info
//	  sampText: 	input sampler for a texture
//	  time: 	input time
color4 calcColor(in sViewport vp, in sRay ray, in samplerCube sampText, in float time)
{
    // Calculate the location to sample from
    vec3 cubeLocation = calcSampleLocation(ray.direction.xyz, time);
    
    return texture(sampText, cubeLocation);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray, iChannel0, iTime);
}