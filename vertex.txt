#version 300 es
// MAIN DUTY: READ ATTRIBUTES
// e.g. 3D position in space
// e.g. uv: texture coordinate
// e.g. normal

layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;

// TRANSFORM UNIFORMS
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;

// VARYING
// PER-VERTEX: final color
//out vec4 vColor;

// PER-FRAGMENT: individual components
out vec3 vNormal;

void main()
{
	// REQUIRED: SET THIS VALUE
	// problem: gl_Position is in "clip space"
	// problem: aPosition is in "object space"
	// gl_Position = aPosition;
	
	// position in world space (wrong)
	vec4 pos_world = uModelMat * aPosition;
	// gl_Position = pos_world;
	
	// position in camera space (still wrong)
	vec4 pos_camera = uViewMat * pos_world;
	// vec4 pos_camera = uViewMat * uModelMat * aPosition;
	// gl_Position = pos_camera;
	
	// position in clip space (correct)
	vec4 pos_clip = uProjMat * pos_camera;
	// vec4 pos_clip = uViewProjMat * pos_world;
	// vec4 pos_clip = uProjMat * uViewMat * uModelMat * aPosition;
	gl_Position = pos_clip;
	// OPTIONAL: write varyings
	// vColor = vec4(1.0, 0.5, 0.0, 1.0);
	// vColor = aPosition;
	// vColor = pos_camera;
	
	// DEBUGGING:
	// output normal as color
	// PER-VERTEX output
	//vColor = vec4(aNormal * 0.5 + 0.5, 1.0);
	
	vNormal = aNormal;

}