void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // UV for input texture
    sCoord uv = fragCoord / iChannelResolution[0].xy;
    
    // Texture samples from 0 - 1.
    // That means to get adjacent texels, a small amount needs to be added
    // Only done in x since this is a horizontal pass. Half since this is used for edge sampling
    float halfInvResX = (1.0 / iChannelResolution[0].x) * .5;
    float offsetOneAndHalf = 3. * halfInvResX;
    
    // Doing a 5x5 kernel sampling from the edges of texels (thereby only requiring 4 samples)
    // The normalizer for a 5x5 (that only uses 4 samples) is 1/8
    // This is because the kernel is [1, 3, 3, 1]
    float edgeNormalizer5x5 =  0.125; 	// Normalizer for the 1 in the kernel
    float edgeNormalizer5x5mid = 0.375; // Normalizer for the 3 in the kernel
    
    // Get all the pixels with (-1.5, -0.5, 0.5, 1.5) offset 
    // Use getColorNormalized (which is in the common tab)
    color4 color5x5 = getColorNormalized(vec2(uv.x - (offsetOneAndHalf), uv.y) , iChannel0, edgeNormalizer5x5);
    color5x5 += getColorNormalized(vec2(uv.x - halfInvResX, uv.y), iChannel0, edgeNormalizer5x5mid);
    color5x5 += getColorNormalized(vec2(uv.x + halfInvResX, uv.y), iChannel0, edgeNormalizer5x5mid);
    color5x5 += getColorNormalized(vec2(uv.x + (offsetOneAndHalf), uv.y), iChannel0, edgeNormalizer5x5);
    
    fragColor = color5x5;
    
}