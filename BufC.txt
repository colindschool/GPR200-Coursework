//   Copyright 2020 Colin Deane
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//	   		http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
//		File name: Buffer C
//		Purpose: Do a pass through with the sobel operator.
//
//	 Source for Sobel Operator and its kernel: https://en.wikipedia.org/wiki/Sobel_operator

// edgeDetectionOnePass: does one pass through using the edge detection
//		text: the texture to be sampled (channel A)
//		center: the center pixel to be sampled
//		pixelSize: the size of the pixels
//		middleWeight: the middle weight of the kernel since it differs between passes
vec4 edgeDetectionOnePass(in sampler2D text, in vec2 center, in vec2 pixelSize, float middleWeight)
{
    // Kernel is [1, 2, 1] and [1, -2, 1]
    float weight = .25;
    
    // Sample various pixels around the center and make sure to multiply by weight
    vec4 color = middleWeight * texture(text, center);
    color += texture(text, center + pixelSize);
    color += texture(text, center - pixelSize);
    color *= weight;
    
	return color;
}

// mainImage: calculates the UV and invResolution.
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord / iChannelResolution[0].xy;
    vec2 invRes = 1.0 / iChannelResolution[0].xy;
    // Gets the color using the edge detection pass through
    vec4 color = edgeDetectionOnePass(iChannel0, uv, vec2(invRes.x, 0.0), -2.0); 
    color += edgeDetectionOnePass(iChannel0, uv, vec2(0.0, invRes.y), -2.0);
    // Make sure to do .gggg to get the best black and white photo
    fragColor = color.gggg;
}