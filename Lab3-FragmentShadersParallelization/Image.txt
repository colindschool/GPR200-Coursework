struct Sphere
{
    vec4 center;
    float radius;
};
    
struct HitRecord
{
 	vec4 point;
    vec4 normal;
    float t;
    bool frontFace;
    
};
    
void setFaceNormal(in vec4 rayDirection, in vec4 outwardNormal, out HitRecord hit)
{
 	hit.frontFace = dot(rayDirection, outwardNormal) < 0.0f;
    hit.normal = hit.frontFace ? outwardNormal : -outwardNormal;
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}

// Return the normalized version of a ray.
// Not sure if length is the fastest function
vec4 unitVector(in vec4 ray)
{
 	return (ray / float(length(ray)));   
}

// Returns the squared length of a ray
float lenSq(in vec4 ray)
{
    return (dot(ray, ray));
}

vec4 at(in vec4 rayOrigin, in vec4 rayDirection, in float t)
{
    return (rayOrigin + (t*rayDirection));
}

bool hitSphere(in Sphere sphere, in vec4 rayDirection, in vec4 rayOrigin, in float tMin, in float tMax, out HitRecord rec)
{
    vec4 rayWithoutCenter = rayOrigin - sphere.center;
    float a = lenSq(rayDirection);
    float halfB = dot(rayWithoutCenter, rayDirection);
    float c = lenSq(rayWithoutCenter) - (sphere.radius * sphere.radius);
    float discriminant = halfB*halfB - a*c;
	
    if(discriminant > 0.)
    {
     	float root = sqrt(discriminant);
        
        float temp = (-halfB - root) / a;
        if(temp < tMax && temp > tMin)
        {
         	rec.t = temp;
            rec.point = at(rayOrigin, rayDirection, temp);
            rec.normal = (rec.point - sphere.center) / sphere.radius;
            vec4 outwardNormal = (rec.point - sphere.center) / sphere.radius;
            setFaceNormal(rayDirection, outwardNormal, rec);
            return true;
        }
        
        temp = (-halfB + root) / a;
        if(temp < tMax && temp > tMin)
        {
         	rec.t = temp;
            rec.point = at(rayOrigin, rayDirection, temp);
            rec.normal = (rec.point - sphere.center) / sphere.radius;
            vec4 outwardNormal = (rec.point - sphere.center) / sphere.radius;
            setFaceNormal(rayDirection, outwardNormal, rec);
            return true;
        }
    }
    return false;
}

bool hitWorld(Sphere spheres[2], in vec4 rayDirection, in vec4 rayOrigin, in float tMin, in float tMax, out HitRecord rec)
{
    HitRecord tempRec;
    bool hitAnything = false;
    float closest = tMax;
    
    for(int i = 1; i >= 0; --i)
    {
     	if(hitSphere(spheres[i], rayDirection, rayOrigin, tMin, tMax, tempRec))
        {
         	hitAnything = true;
            closest = tempRec.t;
            rec = tempRec;
        }
    }
    
    return hitAnything;
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin, in Sphere spheres[2])
{
    HitRecord rec;
    // More likely to not hit anything in the world (accounting for loop rollback)
    if(!(hitWorld(spheres, rayDirection, rayOrigin, 0.0f, 1000000.0f, rec)))
    {
        vec4 normRay = unitVector(rayDirection);
    	float blendAmount = 0.5f * (normRay.y + 1.0f);
    	return mix(vec4(1.0f), vec4(0.5f, 0.7f, 1.0f, 1.0f), blendAmount);
        
    }
    return 0.5f * (rec.normal + vec4(1.0f));
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    Sphere spheres[2];
    spheres[0].center = vec4(0.0, 0.0, -1.0, 1.0);
    spheres[0].radius = 0.5f;
    spheres[1].center = vec4(0.0, -100.5, -1.0, 1.0);
    spheres[1].radius = 100.0f;
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);

    // color
    fragColor = calcColor(rayDirection, rayOrigin, spheres);

    // TEST COLOR:
    //  -> what do the other things calculated above look like?
    //fragColor = vec4(viewport, 0.0, 0.0);
    //fragColor = vec4(ndc, 0.0, 0.0);
    //fragColor = vec4(uv, 0.0, 0.0);
    
}