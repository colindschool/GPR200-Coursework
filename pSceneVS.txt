#version 300 es

layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec4 aTexcoord;
layout (location = 3) in vec4 aTangent;
layout (location = 4) in vec4 aBitangent;

uniform mat4 uModelMat, uViewMat, uProjMat;

out vec4 vNormal;
out vec4 vPosClip;
out vec4 vPosSurface;

// LIGHTING VARYINGS
out vec3 vLightPos[2];
out vec4 vLightColor[2];
out float vLightIntensity[2];
out vec3 vLightDir[2];

// Structure for containing a pointlight
struct PointLight
{
	vec4 center; 		// Location of the light source
	vec4 color;			// Color of the light
	float intensity;		// Intensity of the light
};

// initLight: Initializes a pointlight 
//		vec4 center: 		the position of the light in world space
//		mat4 viewMat:		the view matrix to convert the light from world to view space
//		vec4 color: 		the color of the light
//		float intensity:	the intensity of the light
void initLight(in vec4 center, in mat4 viewMat, in vec4 color, in float intensity, 
				out PointLight light)
{
	light.center = viewMat * center;
	light.color = color;
	light.intensity = intensity;
}

void main()
{
	// PERSPECTIVE PIPELINE
	mat4 modelViewMat = uViewMat * uModelMat;
	
	vec4 posCamera = modelViewMat * aPosition;
	vec4 posSurface = posCamera;
	vec4 posClip = uProjMat * posCamera;
	gl_Position = posClip;
	vPosClip = posClip;
	vPosSurface = posSurface;
	
	// NORMAL PIPELINE
	mat3 normalMatrix = transpose(inverse(mat3(modelViewMat)));
	vNormal = normalize(vec4(normalMatrix * aNormal, 0.0));
	vec3 tang = normalize(normalMatrix * vec3(aTangent));
	vec3 bitang = normalize(normalMatrix * vec3(aBitangent));
	
	mat3 toObjectLocal = mat3(
		tang.x, bitang.x, vNormal.x,
		tang.y, bitang.y, vNormal.y,
		tang.z, bitang.z, vNormal.z);
	
	
	// LIGHTING PIPELINE
	PointLight light1, light2;
	initLight(vec4(.5, -1.5, 2., 1.0), uViewMat, vec4(1.0, 0.5, 0.0, 1.0), 100., light1);
	initLight(vec4(-7., 2.0, 10.0, 1.0), uViewMat, vec4(1.0), 100., light2);
	
	vLightDir[0] = normalize(toObjectLocal * vec3(light1.center - posSurface));
	vLightDir[1] = normalize(toObjectLocal * vec3(light2.center - posSurface));
	
	vLightPos[0] = toObjectLocal * vec3(light1.center);
	vLightPos[1] = toObjectLocal * vec3(light2.center);
	
	vLightColor[0] = light1.color;
	vLightColor[1] = light2.color;
	
	vLightIntensity[0] = light1.intensity;
	vLightIntensity[1] = light2.intensity;
}