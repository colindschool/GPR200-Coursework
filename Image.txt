#define MAX_STEPS 100
#define MAX_DIST 100.
#define SURF_DIST .01
/*
float GetDist(vec3 p)
{
 	vec4 s = vec4(0, 1, 6, 1);
    float sphereDist = length(p - s.xyz) - s.w;
    float planeDist = dot(p, (vec3(0,3. + sin(iTime),0))) + sin(p.x*2.) + sin(p.z*2. + iTime*3.);
    
    float d = min(sphereDist*.5, planeDist*.7);
    return d;
}
float RayMarch(vec3 ro, vec3 rd)
{
 	float dO = 0.;
    
    for(int i = 0; i < MAX_STEPS; i++)
    {
        vec3 p = ro + rd * dO;
        float dS = GetDist(p);
        dO += dS;
        if(dO > MAX_DIST || abs(dS)< SURF_DIST) break;
    }
        
    return dO;
}

vec3 GetNormal(vec3 p)
{
 	float d = GetDist(p);
    vec2 e = vec2(.01, 0);
    
    vec3 n = d - vec3(
        GetDist(p-e.xyy),
        GetDist(p-e.yxy),
        GetDist(p-e.yyx));
    return normalize(n);
}

float GetLight(vec3 p)
{
    vec3 lightPos = vec3(0, 5, 6);
    lightPos.xz += vec2(sin(iTime), cos(iTime));
    vec3 l = normalize(lightPos-p);
    vec3 n = GetNormal(p);
    
    float dif = dot(n, l);
    float d = RayMarch(p + n*SURF_DIST*2., l);
    if(d<length(lightPos-p))
    {
     	dif *= .2;   
    }
    return dif;
}
*/
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    /*vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;

    // Time varying pixel color
    vec3 col = vec3(0);
    
    vec3 ro = vec3(0, 2, 0);
    vec3 rd = normalize(vec3(uv.x, uv.y, 1));
    
    float d = RayMarch(ro, rd);
    
    vec3 p = ro + rd * d;
    float dif = GetLight(p);
    col = vec3(dif);
    d /= 6.;
    //col = vec3(d);
    
    fragColor = vec4(col, 1.0);
*/
    vec2 uv = fragCoord / iResolution.xy;
    //float c = fract(sin(uv.x * 100. + uv.y * 6574.) * 5647.);
    //vec3 col = vec3(c);
    
    //fragColor = vec4(col, 1.0);
    fragColor = texture(iChannel0, uv);
}