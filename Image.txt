// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}

// -----------------------------------------------------------
// EFFECT FUNCTIONS

// Cross fade
// Takes in the viewport and time and returns a color
color4 crossFade(in sViewport vp,in float time, in sampler2D text1, in sampler2D text2, in sDCoord channelResolution)
{ 
    //Adjust coordinates for correctly displaying the texture
    sCoord loc = vp.pixelCoord / channelResolution;
    loc *= channelResolution.y * vp.resolutionInv.y;
    
    // Calculate the blend value
    float blendVal = abs(sin(time));
    
    // Sample the two textures at the coordinates 
    color4 tex1 = texture(text1, loc);
    color4 tex2 = texture(text2, loc);
    // Blend the two samples based on the blending value
    color4 blend = mix(tex1, tex2, blendVal);
    
 	return blend;   
}

// Wave distortion
// Takes in the pixel coordinate
// The y coordinate is what is distorted
sDCoord waveDistortion(in sCoord pc, in sDCoord resolution, in float time, in bool continualDistortion)
{    
    float xCoordCalc = abs(pc.x - (resolution.x * .5));
    // abs(pc.x - (resolution.x * .5)) : absolute value of the x coordinate minus half the resolution width
    // ^^^ This makes the distortion symmetrical in its effect
    // The far ends of the screen will have equal xCoordCalc
    
    // If the user wants gradual distortion over time
    if(continualDistortion)
    {
        // Change the y coordinate by adding a value between -10 and 10 to it.
    	// This is additive over time since it builds on the distortion that is already calculated
        // * .01 : Slow down the distortion
        pc.y += 10. * cos(xCoordCalc * time * .01);
    }
    else // If the user just wants a one time distortion
    {
        // time is removed but to make a significant wave, 100 to -100 is the distortion range of y
        pc.y += 100. * cos(xCoordCalc);
    }
    // Return the distorted pixel coordinate
 	return (pc);   
}

// Structure for a PointLight
struct PointLight
{
	sBasis center; // Location of light source
    color4 color;	 // The color of the light
    float lIntensity; // The intensity of the light
    
};

// Initialize a PointLight structure
void initLight(in sBasis center, in color4 color, in float intensity,
               out PointLight light)
{
    light.center = center;			// Center of the light
    light.color = color;			// Color of the light
    light.lIntensity = intensity;	// Intensity of the light
      
}

// Implement Lambertian shading onto a texture
color4 shading(in sViewport vp, in sampler2D text, in float time)
{
    // Construct a light
    PointLight light;
    //  Initialize the light
    //	Center:
    //	Color: White
    //	Intensity: 100
    initLight(sBasis(sin(time), -cos(time), 0.6), color4(1.0), 100.0,light);
    
    // Get the surface position and normal
    sBasis surfacePos = sBasis(vp.ndc, 0.3);
    sBasis surfaceNorm = normalize(vec3(vp.ndc, 1.0));
    
    // Calculate some important variables
    sBasis distVec = light.center - surfacePos; 	 // The vector difference between the light's center and the texture surface
    float lightLength = sqrt(dot(distVec, distVec)); // Get the length of that distance 
    sBasis lightNorm = distVec / lightLength;		 // Normalize the light vector
    
    float kD = max(0.0f, dot(surfaceNorm, lightNorm)); // Diffuse coefficient
    
    // Attenuation
    float invIntensity = 1. / light.lIntensity;
    float distOIntensity = lightLength * invIntensity; // Light length / light intensity
    // iL = attenuated intensity of the light
    float iL = 1. / (1. + (distOIntensity) + (distOIntensity * distOIntensity));
    
    float iD = kD * iL;  // Diffuse Intensity
    
    // Sample the texture at that coordinate
    color4 texColor = texture(text, vp.ndc);
    
    // Return the texture color * diffuse intensity * light color
 	return color4(texColor * iD * light.color);   
}

// Cube Map rotation
// Rotate around the y axis in a cube map
// Also applies the wave distortion done in effect #2
// Rotation matrix equation from Dr. Peyam
//		Source: https://youtu.be/Ta8cKqltPfU
color4 cubeMap(in sRay ray, in sViewport vp, in samplerCube cube, in float time)
{
    // Get the location of the cube (by getting the direction of the ray)
    vec3 cubeLocation = ray.direction.xyz;
    
    // Calculate the rotation based on time
    // Multiply by 360 to convert from radians to degrees
    float rotation = cos(time * .01) * 360.;
    // Create a rotation matrix
    mat2 rotMatrix = mat2(cos(rotation), -sin(rotation), sin(rotation), cos(rotation));
    
    // Change where the cube location is based on the rotation matrix
    cubeLocation.xz *= rotMatrix;
    
    // Add the wave distortion affect to the pixel coordinates
    // .xy because those are 2D coordinates that are being sampled from
    cubeLocation.xy += waveDistortion(vp.pixelCoord, vp.resolution, time, true) * vp.resolutionInv;
  
    return texture(cube, cubeLocation);
}

//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray, in float time,
                 in sampler2D text1, in sampler2D text2, in samplerCube textCube,
                 in sDCoord channelResolution)
{
    // CROSSFADE
	//return crossFade(vp, time, text1, text2, channelResolution);
    
    // DISTORTION
    // Calculate the distorted pixel coordinate with waveDistortion
    //sDCoord disPC = waveDistortion(vp.pixelCoord, vp.resolution, time, false); // One time
    //sDCoord disPC = waveDistortion(vp.pixelCoord, vp.resolution, time, true);	 // Over time
    // Convert the distorted pixel coordinate to UV coordinates
    //sCoord disUV = disPC * vp.resolutionInv;
    //return texture(text1, disUV);
    
	// SHADING
    //return shading(vp, iChannel1, time);
    
    return cubeMap(ray, vp, textCube, time);
}

//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray, iTime, iChannel0, iChannel1, iChannel2, iChannelResolution[0].xy);
}
